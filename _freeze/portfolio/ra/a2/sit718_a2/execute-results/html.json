{
  "hash": "444cefe7cdd215edfe1f2370d89c4fc3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Red Wine\"\nformat: html\neditor: visual\n---\n\n# Using Aggregation Function for Data Analysis\n\nDataset: Red Portuguese “Vinho Verde” wine (Cortez et al., 2009)\n\n## The Data\n\n-   Dataset: Red Portuguese “Vinho Verde” wine (Cortez et al., 2009)\n-   Five input variables: citric acid, chlorides, total sulfur dioxide, pH, alcohol\n-   One output variable: quality\n\n# Data Exploration\n\nThis section uses scatter plots to explore the relationship between wine quality and the independent variables citric acid, chlorides, total sulfur dioxide, and alcohol. Histogram plots of the dependent and independent variables are used to explore the distribution of each variable.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#(i) and (ii)\ndata.raw = as.matrix(read.table(\"RedWine.txt\"))\n\nset.seed(225259172) # the seed is my student ID number\n\n#(iii)\nsubset.num_samples = 460\ndata.subset = data.raw[sample(1:1599, subset.num_samples), c(1:6)]\n\ndata.variable.names = c(\"citric acid\", \"chlorides\", \"total sulfur dioxide\", \"pH\", \"alcohol\")\ny.name = 'quality'\n\n#(iv)\n# Create 5 scatterplots function (for each X variable against the variable of interest Y)\"\ncolours = c(\"#9E9E9E\",\"#61D04F\",\"#2297E6\",\"#CD0BBC\",\"#F5C710\",\"#DF536B\")\n\nfor (i in c(1,2,3,4,5)){\n  name = data.variable.names[i]\n  plot(x = data.subset[,i], y = data.subset[,6], col = colours[i], pch=20, cex= 3, xlab= name, ylab=y.name,\n       main=sprintf(\"Scatter plot of %s versus %s (n=%s)\", y.name, name, subset.num_samples)\n       )\n}\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-1-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-1-5.png){width=672}\n:::\n:::\n\n\n## Scatter Plot: Citric Acid\n\nWine quality increases with increasing citric acid value. The correlation coefficient is r = 0.244.\n\n## Scatter Plot: Chlorides\n\nWine quality decreases with increasing chlorides value. The correlation coefficient is r = -0.122. A potential outlier is observed at 0.61 chlorides value. A negation function will be required.\n\n## Scatter Plot: Total Sulfur Dioxide\n\nWine quality decreases with the increasing value of total sulphur dioxide. The correlation coefficient is r = -0.206. A possible outlier at a value of 289 for total sulfur dioxide. A negation function will be required.\n\n## Scatter Plot: pH\n\nWine quality does not appear to have a linear relationship with pH. The correlation coefficient is r = -0.072. Potential outlier at pH value of 4.0.\n\n## Scatter Plot: Alcohol\n\nWine quality increases with alcohol content. The correlation coefficient is r = 0.442.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of bins for histograms\nbins = c(16,30,48,11,24,8)\n\n# Create 6 histograms for each X variable and Y\nfor (i in c(1,2,3,4,5,6)){\n  if (i == 6){\n    name = y.name\n  }\n  else{\n  name = data.variable.names[i]\n  }\n  hist(data.subset[,i], breaks=bins[i], xlab=name, main=sprintf(\"Histogram of %s (n=%s)\", name, subset.num_samples),\n       col=colours[i]\n  )\n}\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-2-3.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-2-4.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-2-5.png){width=672}\n:::\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-2-6.png){width=672}\n:::\n:::\n\n\n## Histogram: Citric Acid\n\nThe distribution of citric acid is uniform for the middle values. However, many observations show a peak near-zero value. At the higher citric acid values, fewer observations give the distribution a right (positive) skew. The distribution range is from 0.000 to 0.790, with a median value of 0.260 and a mean of 0.284.\n\n## Histogram: Chlorides\n\nThe distribution of chlorides is unimodal with significant right (positive) skew. Most of the chlorides observations are between 0.04 and 0.15. Values above 0.15 have very few counts and are potential outliers. The distribution range is from 0.038 to 0.611, with a median value of 0.080 and a mean of 0.0912.\n\n## Histogram: Total Sulfur Dioxide\n\nThe distribution of total sulfur dioxide is unimodal with right (positive) skew and reassembles a log-normal shape. The value of 289 appears to be an outlier. The distribution range is from 6.0 to 289.0, with a median value of 38.5 and a mean of 47.12.\n\n## Histogram: pH\n\nThe distribution of pH is unimodal with minimal skew and a potential outlier at 4.01 and has a normal distribution shape. The distribution range is from 2.89 to 4.01, with a median value of 3.30 and a mean of 3.31.\n\n## Histogram: Alcohol\n\nThe distribution of alcohol is unimodal with right (positive) skew and reassembles a log-normal shape. It ranges from 8.7 to 14.9, with a median value of 10.1 and a mean of 10.4.\n\n## Histogram: Quality\n\nThe quality distribution is unimodal, with some right (positive) skew having a normal distribution shape. The data contains only integer values, which leads to gaps in the histogram unless a small number of bins are used. The distribution range is from 3 to 8, with a median value of 6 and a mean of 5.6.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate a summary of the data\nsummary(data.subset)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       V1               V2                V3               V4       \n Min.   :0.0000   Min.   :0.03800   Min.   :  6.00   Min.   :2.890  \n 1st Qu.:0.1000   1st Qu.:0.07100   1st Qu.: 23.00   1st Qu.:3.200  \n Median :0.2600   Median :0.08000   Median : 38.50   Median :3.300  \n Mean   :0.2837   Mean   :0.09117   Mean   : 47.12   Mean   :3.308  \n 3rd Qu.:0.4400   3rd Qu.:0.09400   3rd Qu.: 64.25   3rd Qu.:3.410  \n Max.   :0.7900   Max.   :0.61100   Max.   :289.00   Max.   :4.010  \n       V5              V6       \n Min.   : 8.70   Min.   :3.000  \n 1st Qu.: 9.50   1st Qu.:5.000  \n Median :10.10   Median :6.000  \n Mean   :10.41   Mean   :5.633  \n 3rd Qu.:11.00   3rd Qu.:6.000  \n Max.   :14.90   Max.   :8.000  \n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate Pearson correlation coefficients\ncor(data.subset, data.subset[,6])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          [,1]\nV1  0.24381427\nV2 -0.12184464\nV3 -0.20584651\nV4 -0.07241671\nV5  0.44197926\nV6  1.00000000\n```\n\n\n:::\n:::\n\n\n# Transform the Data\n\nThe independent variables citric acid, chlorides, total sulfur dioxide, and alcohol were chosen for the aggregation function fitting. These variables had the strongest association with wine quality. Treatment of outliers was considered, and it was decided not to apply any treatment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(e1071) # Required for Skewness function\nlibrary(rcompanion) # Provides plotting of normal PDF on histogram\nlibrary(latex2exp) # Provides the ability to use latex in plot titles/labels \n\n# min-max normalisation\n# Allows optional arguements to set the min and max for the scaling\nminmax = function(x, x_min=NULL, x_max=NULL){\n  if (is.null(x_min)){\n    x_min = min(x)\n  }\n  if (is.null(x_max)){\n    x_max = max(x)\n  }\n  (x - x_min)/(x_max-x_min)\n}\n\n# z-score standardisation and scaling to unit interval\nunit.z = function(x){\n  0.15*((x-mean(x))/sd(x)) + 0.5\n}\n\n# Negation function for normalised data\nnegation = function(x){\n(max(x) + min(x)) - x\n}\n\n# Vector with indices of chosen variables\nI = c(1,2,3,5,6)\n\n# Matrix containing the variables to transform\nvariables_for_transform = data.subset[,I]\ndata.transformed = variables_for_transform\n```\n:::\n\n\n# Citric acid\n\nThis distribution has some right skew with a skewness value of 0.326. Since the data is right-skewed, a power or log transformation is suitable. Through trial and error, the final transformation applied was $$x_{new} = x^{0.75}$$\n\nThis transformed the distribution closer to a normal distribution with a skewness of -0.04. The variable was then scaled between 0 and 1 using a min-max function. This variable already had a positive association with quality, so no negation was required.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform\np=0.75 # final value after trying p=0.5 first\ndata.transformed[,1] = variables_for_transform[,1]^p\nskewness(data.transformed[,1])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.0399249\n```\n\n\n:::\n\n```{.r .cell-code}\nname1 = TeX(sprintf(r\"(%s $^{%s}$)\", data.variable.names[I[1]], p))\ntitle1 = TeX(sprintf(r\"(Histogram of %s $^{%s}$ (n=%s))\", data.variable.names[I[1]], p, subset.num_samples))\nhist(data.transformed[,1],xlab=name1, breaks=bins[I[1]], main=title1, col=colours[I[1]])\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmin_1 = min(data.transformed[,1])\nmax_1 = max(data.transformed[,1])\n\n# Normalise between 0 - 1\ndata.transformed[,1] = minmax(data.transformed[,1])\nname1s = TeX(sprintf(r\"(normalised (%s $^{%s}$))\", data.variable.names[I[1]], p))\ntitle1s = TeX(sprintf(r\"(Histogram of normalised (%s $^{%s}$) (n=%s))\", data.variable.names[I[1]], p, subset.num_samples))\nplotNormalHistogram(data.transformed[,1], xlab=name1s, breaks=bins[I[1]], main=title1s, col=colours[I[1]],xlim=c(0,1))\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n:::\n\n\n# Chlorides\n\nThis distribution has a significant right skew, with a skewness value of 5.0. Since the data is right-skewed, a suitable transformation is a power or log transformation. A more substantial transformation than the log was required. Through trial and error, the final transformation applied was $$ x_{new} = -\\frac{1}{x}$$ Giving a skewness of -0.259.The variable was then scaled between 0 and 1 using a min-max function. This variable had a negative association with quality, so a negation function was applied.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform\np=-1 # final value after trying log transform first\ndata.transformed[,2] = -variables_for_transform[,2]^p\n\nskewness(data.transformed[,2])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.2587889\n```\n\n\n:::\n\n```{.r .cell-code}\nname2 = TeX(sprintf(r\"((-%s $^{%s}$))\", data.variable.names[I[2]], p))\ntitle2 = TeX(sprintf(r\"(Histogram of (-%s $^{%s}$) (n=%s))\", data.variable.names[I[2]], p, subset.num_samples))\nhist(data.transformed[,2],xlab=name2, breaks=bins[I[2]], main=title2, col=colours[I[2]])\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmin_2 = min(data.transformed[,2])\nmax_2 = max(data.transformed[,2])\n\n# Normalise between 0 - 1\ndata.transformed[,2] = minmax(data.transformed[,2])\nname2s = TeX(sprintf(r\"(negated normalised (-%s $^{%s}$))\", data.variable.names[I[2]], p))\ntitle2s = TeX(sprintf(r\"(Histogram of negated normalised (-%s $^{%s}$) (n=%s))\", data.variable.names[I[2]], p, subset.num_samples))\n#plotNormalHistogram(data.transformed[,2], xlab=name2s, breaks=bins[I[2]], main=title2s, col=colours[I[2]],xlim=c(0,1))\n\n# Negate\ndata.transformed[,2] = negation(data.transformed[,2])\nplotNormalHistogram(data.transformed[,2], xlab=name2s, breaks=bins[I[2]], main=title2s, col=colours[I[2]],xlim=c(0,1))\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n:::\n\n\n# Total Sulfur Dioxide\n\nThis distribution has a strong right skew, with a skewness value 1.72. Since the data is right-skewed, a suitable transformation is a power or log transformation. The distribution looks log-normal, the transformation applied was $$x_{new} = \\log(x)$$ This pushed the distribution closer to normal and reduced the skewness to -0.17. The variable was then scaled between 0 and 1 using a min-max function. This variable had a negative association with quality, so a negation function was applied.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform\ndata.transformed[,3] = log(variables_for_transform[,3])\nskewness(data.transformed[,3])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] -0.1698297\n```\n\n\n:::\n\n```{.r .cell-code}\nname3 = TeX(sprintf(r\"(log(%s))\", data.variable.names[I[3]]))\ntitle3 = TeX(sprintf(r\"(Histogram of log(%s) (n=%s))\", data.variable.names[I[3]], subset.num_samples))\nhist(data.transformed[,3],xlab=name3, breaks=24, main=title3, col=colours[I[3]])\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmin_3 = min(data.transformed[,3])\nmax_3 = max(data.transformed[,3])\n\n# Normalize between 0 - 1\ndata.transformed[,3] = minmax(data.transformed[,3])\n\n# Negate\ndata.transformed[,3] = negation(data.transformed[,3])\nname3s = TeX(sprintf(r\"(negated normalised log(%s))\", data.variable.names[I[3]]))\ntitle3s = TeX(sprintf(r\"(Histogram of negated normalised log(%s) (n=%s))\", data.variable.names[I[3]], subset.num_samples))\nplotNormalHistogram(data.transformed[,3], xlab=name3s, breaks=24, main=title3s, col=colours[I[3]],xlim=c(0,1))\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n\n# Alcohol\n\nThis distribution has a strong right skew, with a skewness value of 1.06. Since the data is right-skewed, a suitable transformation is a power or log transformation. The distribution looks log-normal, so a log transform was first tried. Through trial and error, the final transformation applied was $$x_{new} = -\\frac{1}{x^2} $$ Giving a skewness of -0.44. The variable was then scaled between 0 and 1 using a min-max function. This variable had a positive association with quality, so no negation was required.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform\np=-2 # final value\ndata.transformed[,4] = -(variables_for_transform[,4]^p)\n\nskewness(data.transformed[,4])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.4390636\n```\n\n\n:::\n\n```{.r .cell-code}\nname4 = TeX(sprintf(r\"((-%s $^{%s}$))\", data.variable.names[I[4]],p))\ntitle4 = TeX(sprintf(r\"(Histogram of -(%s $^{%s}$) (n=%s))\", data.variable.names[I[4]], p, subset.num_samples))\nhist(data.transformed[,4],xlab=name4, breaks=12, main=title4, col=colours[I[4]])\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\nmin_4 = min(data.transformed[,4])\nmax_4 = max(data.transformed[,4])\n\n# Normalize between 0 - 1\ndata.transformed[,4] = minmax(data.transformed[,4])\nname4s = TeX(sprintf(r\"(normalised (-%s $^{%s}$))\", data.variable.names[I[4]],p))\ntitle4s = TeX(sprintf(r\"(Histogram of normalised (-%s $^{%s}$) (n=%s))\", data.variable.names[I[4]], p, subset.num_samples))\nplotNormalHistogram(data.transformed[,4], xlab=name4s, breaks=12, main=title4s, col=colours[I[4]],xlim=c(0,1))\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n:::\n\n\n# Quality\n\nThis distribution has some right skew, with a low skewness value of 0.28. Since the distribution already looks normal no data transformation was applied. The variable was then scaled between 0 and 1 using a min-max function. Using the range of possible values 0-10. This variable is the dependent variable, so no negation was required.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transform - no transformation applied to this variable\ndata.transformed[,5] = variables_for_transform[,5]\nskewness(data.transformed[,5])\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.2796584\n```\n\n\n:::\n\n```{.r .cell-code}\nname5 = sprintf(\"%s\", y.name)\ntitle5 = sprintf(\"(Histogram of %s (n=%s))\", y.name, subset.num_samples)\nhist(data.transformed[,5],xlab=name5, breaks=8, main=title5, col=colours[I[5]])\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# We know the quality could range between 0 and 10, so use those values here.\nmin_y = 0\nmax_y = 10\n\n# Normalise between 0 - 1\ndata.transformed[,5] = minmax(data.transformed[,5], min_y, max_y)\nname5s = sprintf(\"normalised %s\", y.name)\ntitle5s = sprintf(\"Histogram of normalised %s (n=%s)\", y.name, subset.num_samples)\nplotNormalHistogram(data.transformed[,5], xlab=name5s, breaks=8, main=title5s, col=colours[I[5]],xlim=c(0,1))\n```\n\n::: {.cell-output-display}\n![](sit718_a2_files/figure-html/unnamed-chunk-9-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# Save this transformed data to a text file\nwrite.table(data.transformed, \"stephens-transformed.txt\")\n```\n:::\n\n\n# Build models and investigate\n\nA Weighted Arithmetic Mean (WAM), Weighted Power Mean (WPM) and Ordered Weighted Average (OWA) aggregation functions are fitted to the data for analysis and prediction using the AggWAfit R library of James (2016)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"AggWaFit718.R\")\n\n# Replace previous matrix with the one loaded from disk\ndata.transformed = as.matrix(read.table(\"stephens-transformed.txt\"))  # import saved data\n\n# Get weights for Weighted Arithmetic Mean with fit.QAM() \nfit.QAM(data.transformed,output.1=\"output_QAM_AM.txt\",stats.1=\"stats_QAM_AM.txt\",g=AM,g.inv=invAM)\n\n# Get weights for Power Mean p=0.5 with fit.QAM()\nfit.QAM(data.transformed,output.1=\"output_QAM_PM05.txt\",stats.1=\"stats_QAM_PM05.txt\",g=PM05,g.inv=invPM05)\n\n# Get weights for Power Mean p=2 with fit.QAM()\nfit.QAM(data.transformed,output.1=\"output_QAM_QM.txt\",stats.1=\"stats_QAM_QM.txt\",g=QM,g.inv=invQM)\n\n# Get weights for Ordered Weighted Average with fit.OWA()\n# Note that in AddWaFit the weights don't correspond to the variables but their relative sizes.\nfit.OWA(data.transformed,output.1=\"output_OWA.txt\",stats.1=\"stats_OWA.txt\")\n```\n:::\n\n\n## Model Results\n\n| Metric        | WAM    | WPM (0.5) | WPM (2) | OWA    |\n|---------------|--------|-----------|---------|--------|\n| RMSE          | 0.1403 | 0.1525    | 0.1279  | 0.1204 |\n| Avg Abs Error | 0.1187 | 0.1258    | 0.1070  | 0.0985 |\n| Pearson       | 0.3373 | 0.2823    | 0.3857  | 0.4130 |\n| Spearman      | 0.3602 | 0.3179    | 0.3973  | 0.4217 |\n\n## Model Weights\n\n| Weight | WAM    | WPM (0.5) | WPM (2) | OWA (orness=0.72) |\n|--------|--------|-----------|---------|-------------------|\n| w1     | 0.1589 | 0.0290    | 0.2346  | 0.0590            |\n| w2     | 0.3413 | 0.3772    | 0.3241  | 0.2098            |\n| w3     | 0.4750 | 0.5632    | 0.3233  | 0.2537            |\n| w4     | 0.0247 | 0.0306    | 0.1179  | 0.4775            |\n\n## Model Insights\n\n-   Importance of each variable\n\n    -   From the WAM and WPM models\n\n        -   The chlorides (32-37%) and total sulfur content (32-56%) are the most important variables. A majority of the models weight citric acid (3-23%) as more important than alcohol (2.5 to 11%).\n\n    -   OWA weights correspond with each input's relative size, not the input's source. The orness value of 0.72 suggests more weight is allocated to the higher inputs. The last weight indicates approximately 48% of the weight is allocated to the largest input.\n\n-   The OWA model best fits the selected data, giving the lowest RMSE and highest correlation coefficients. On average, the prediction is out by \\~ 10%\n\n# Use Model for Prediction\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnew_input <- c(0.8, 0.63, 37, 2.51, 7.0) \nnew_input_for_transform <- new_input[c(1,2,3,5)] # choose the same four X variables as in Q2 \n\n# Note: some of these values are outside the min/max that were used when transforming the data before fitting.\n# It was recommended to just use a new min/max for these variables here incorporating the values from new_input.\n\n# Transforming the four variables in the same way as in question 2\n\nnew_input_transformed = new_input_for_transform\n\n#############\n# citric acid\n#############\n\n# Transform\nnew_input_transformed[1] = new_input_for_transform[1]^0.75\n\n# Normalise between 0 - 1\nnew_input_transformed[1] = minmax(new_input_transformed[1], min(c(min_1,new_input_transformed[1])), max(c(max_1,new_input_transformed[1])))\n\n###########\n# chlorides\n###########\n\n# Transform\nnew_input_transformed[2] = -new_input_for_transform[2]^-1\n\n# Normalise between 0 - 1\nnew_input_transformed[2] = minmax(new_input_transformed[2], min(c(min_2,new_input_transformed[2])), max(c(max_2,new_input_transformed[2])))\n\n# Negate\nnew_input_transformed[2] = negation(new_input_transformed[2])\n\n######################\n# total sulfur dioxide\n######################\n\n# Transform\nnew_input_transformed[3] = log(new_input_for_transform[3])\n\n# Normalize between 0 - 1\nnew_input_transformed[3] = minmax(new_input_transformed[3], min(c(min_3,new_input_transformed[3])), max(c(max_3,new_input_transformed[3])))\n\n# Negate\nnew_input_transformed[3] = negation(new_input_transformed[3])\n\n######################\n# alcohol\n######################\n\n# Transform\nnew_input_transformed[4] = -new_input_for_transform[4]^-2\n\n# Normalize between 0 - 1\nnew_input_transformed[4] = minmax(new_input_transformed[4], min(c(min_4,new_input_transformed[4])), max(c(max_4,new_input_transformed[4])))\n\n# Applying the transformed variables to the best model selected from Q3 for Y prediction\n\n# Weights from best fitting model (OWA)\nXweights = c(0.0590,0.2098,0.2537,0.4775)\ny_pred= OWA(new_input_transformed, Xweights) \n\n# Reverse the transformation to convert back the predicted Y to the original scale and then round it to integer\n\n######################\n# quality\n######################\n# Normalise between 0 - 1\npredicated_quality = round(y_pred*(max_y-min_y) + min_y)\n```\n:::\n\n\n## Prediction Example\n\n| Variable             | Raw  | Transformed |\n|----------------------|------|-------------|\n| Citric Acid          | 0.8  | 1           |\n| Chlorides            | 0.63 | 1           |\n| Total Sulfur Dioxide | 37   | 0.47        |\n| Alcohol              | 7.0  | 0           |\n\n**Predicted Quality**: 8 (too high) - The quality prediction is too high and, therefore, unreasonable - High orness means only a few high inputs would give a high output (quality)\n\n## Best conditions for higher-quality wine\n\n-   Higher values for the inputs: citric acid, negation(chlorides), negation (total sulfur dioxide), alcohol\n-   Higher – citric acid and alcohol\n-   Lower – chlorides and total sulfur dioxide\n\n# Limitations, Ethics & Privacy\n\n-   Limitations of the fitting model\n\n    -   Correlation coefficients are weak\n    -   OWA doesn’t tell you the importance of the variables\n    -   The model is only as good as the training data\n    -   The predicated value was beyond the training data set for 3 of the 4 variables\n\n-   The data does not raise privacy concerns as it does not contain information about grape types, wine brands, wine prices, etc. Only de-identified data is used.\n\n-   Professional ethics\n\n    -   Transparent about the methods used to analyse the data\n    -   R script provided that documents all assumptions and steps\n    -   Raw and transformed data is available\n\n# References\n\nCortez P, Cerdeira A, Almeida F, Matos T and Reis J (2009) ‘Modeling wine preferences by data mining from physicochemical properties’. Decision Support Systems, 47(4):547-553.\n\nCsárdi G, Berkelaar M (2024) lpSolve: Interface to 'Lp_solve' v. 5.5 to Solve Linear/Integer Programs \\[R package\\], v5.6.23, accessed 3 April 2025. https://github.com/gaborcsardi/lpSolve\n\nMangiafico S S (2025) rcompanion: Functions to Support Extension Education Program Evaluation \\[R package\\], v2.5.0, Rutgers Cooperative Extension, accessed 3 April 2025. https://CRAN.R-project.org/package=rcompanion/\n\nMeschiari S (2024). latex2exp: Use LaTeX Expressions in Plots \\[R package\\], v0.9.8, accessed 3 April 2025. https://www.stefanom.io/latex2exp/.\n\nMeyer D, Dimitriadou E, Hornik K, Weingessel A and Leisch F (2024) e1071: Misc Functions of the Department of Statistics, Probability Theory Group (Formerly: E1071), TU Wien \\[R package\\]. v1.7-16, accessed 3 April 2025. https://CRAN.R-project.org/package=e1071.\n\nJames, S (2016). AggWAfit R library. 10.13140/RG.2.1.1906.9688.\n",
    "supporting": [
      "sit718_a2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}