{
  "hash": "20c59ec31906ac6046f817cc1c0b4680",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Working with pandas Data Frames (Heterogeneous Data)'\njupyter: python3\n---\n\n::: {#df49fddb .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n## Introduction\nThis task requires working with `pandas` data frames and Python to conduct a data analysis exercise involving meteorological data for three airports in New York. The meteorological data is loaded into a `pandas` data frame from a text file. `Pandas` operations are used to filter and aggregate the data to enable plotting of the mean monthly and daily wind speeds for different airports.  Additional analysis is performed for JFK airport to handle missing data and plot the daily average temperature throughout 2013.\n\n## Data input\nA provided data file nycflights13_weather.csv.gz that contained hourly meteorological data for three airports in New York: EWR, JFK and LGA was used for this analysis. The data contained in the file is:\n\n+ origin – weather station: LGA, JFK, or EWR,\n+ year, month, day, hour – time of recording,\n+ temp, dewp – temperature and dew point in degrees Fahrenheit,\n+ humid – relative humidity,\n+ wind_dir, wind_speed, wind_gust – wind direction (in degrees), speed and gust speed (in mph),\n+ precip – precipitation, in inches,\n+ pressure – sea level pressure in millibars,\n+ visib – visibility in miles,\n+ time_hour – date and hour (based on the year, month, day, hour fields)\n\nThis file is loaded into a `pandas` data frame using the `pd.read_csv` function. Any lines containing '#' are ignored when loading.\n it.\n\n::: {#88c50bf1 .cell execution_count=2}\n``` {.python .cell-code}\n# Load data file in dataframe\nnyc_ap_weather = pd.read_csv(\"nycflights13_weather.csv.gz\",comment=\"#\")\n```\n:::\n\n\n### Covert all columns so they use SI units\nFor this step we use the `pandas` `apply` method a helper function `fahrenheit_to_celsius` and `lambda` functions to do the appropriate conversion for each variable. \n\n::: {#e705f3e4 .cell execution_count=3}\n``` {.python .cell-code}\n# Helper function for temperature conversion\ndef fahrenheit_to_celsius(fahrenheit):\n    \"\"\"\n    This function takes a Fahrenheit value and returns the Celsius equivalent.\n\n    The formula is C = (F-32)* 5/9\n\n    :param fahrenheit: Input temperature in Fahrenheit.\n    :return: Temperature in Celsius.\n    \"\"\"\n    return (fahrenheit - 32) * 5/9\n```\n:::\n\n\n::: {#6100951e .cell execution_count=4}\n``` {.python .cell-code}\n# Convert \"temp\" and \"dewp\" from Fahrenheit to Celsius\nnyc_ap_weather[\"temp\"] = nyc_ap_weather[\"temp\"].apply(fahrenheit_to_celsius)\nnyc_ap_weather[\"dewp\"] = nyc_ap_weather[\"dewp\"].apply(fahrenheit_to_celsius)\n\n# Convert \"precip\" to millimetres\nnyc_ap_weather[\"precip\"] = nyc_ap_weather[\"precip\"].apply(lambda x:x*25.4)\n\n# Convert \"visib\" to metres\nnyc_ap_weather[\"visib\"] = nyc_ap_weather[\"visib\"].apply(lambda x:x*1609.34)\n\n# Convert \"wind_speed\" and \"wind_gust\" to m/s\nnyc_ap_weather[\"wind_speed\"] = nyc_ap_weather[\"wind_speed\"].apply(lambda x:x*0.44704)\nnyc_ap_weather[\"wind_gust\"] = nyc_ap_weather[\"wind_gust\"].apply(lambda x:x*0.44704)\n```\n:::\n\n\n### Compute monthly mean wind speeds for all three airports\nBefore calculating the mean for each airport, we check that the recorded hourly wind speed is not above the highest recorded Hurricane wind speed (96 m/s). Values larger than this are likely to be erroneous and are replaced with NaN so they don't impact the calculation of the mean.\n\n::: {#84e39d3c .cell execution_count=5}\n``` {.python .cell-code}\n# Check for any wind speeds above the highest recorded Hurricane (345 km/h | 96 m/s) and replace any found with NaN \nnyc_ap_weather.loc[(nyc_ap_weather[\"wind_speed\"] >= 96), \"wind_speed\"] = np.nan\n\n# Calculate the monthly average wind_speed at all three airports\nmonthly_ave_wind_speed = nyc_ap_weather.groupby([\"origin\", \"year\", \"month\"])[[\"wind_speed\"]].mean(numeric_only=True).reset_index()\n```\n:::\n\n\n### Plot of the monthly mean wind speeds for EWR, JFK and LGA\nNow that the monthly mean speed has been calculated for each airport, we can plot these on the same figure for visual comparison.\n\n::: {#5e0c343c .cell execution_count=6}\n``` {.python .cell-code}\ndef plot_monthly_average(months, data, origin, colour, variable=\"wind_speed\"):\n    # Create plot of average wind_speed versus date\n    plt.plot(months, data[data.origin == origin][variable], label=origin, color=colour)\n    plt.xlabel(\"Month\")\n    plt.ylabel(\"Monthly average wind speed [m/s]\")\n\n# Create an array of dates, required for the x-axis\nmonth_dates = np.arange(\"2013-01-01\", \"2014-01-01\", dtype=\"datetime64[M]\")\n\n# Set figure size\nplt.figure(figsize=(11, 6))\n\n# Plot LGA\nplot_monthly_average(month_dates, monthly_ave_wind_speed, colour=\"tab:blue\", origin=\"LGA\")\n# Plot EWR\nplot_monthly_average(month_dates, monthly_ave_wind_speed, colour=\"tab:orange\", origin=\"EWR\")\n# Plot JFK\nplot_monthly_average(month_dates, monthly_ave_wind_speed, colour=\"tab:green\", origin=\"JFK\")\n\nplt.title(\"Monthly mean wind speeds for NYC airports during 2013\")\n# Add legend\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Task_4P_files/figure-html/cell-7-output-1.png){width=887 height=523}\n:::\n:::\n\n\nThe monthly average wind speed for each airport follows a seasonal pattern with higher average wind speeds in the cooler months and lower monthly average wind speeds in the warmer months. JFK has the highest monthly wind speeds throughout the year, and EWR has the lowest.\n\n### Compute daily mean wind speed for LGA airport\nWe filter the data frame on origin == \"LGA\", then group by \"year\", \"month\", and \"day\", select only the \"wind_speed\" column and call the mean function.\n\n::: {#2f34aeb2 .cell execution_count=7}\n``` {.python .cell-code}\n# Calculate the daily average wind_speed at LGA\ndaily_ave_wind_speed = nyc_ap_weather[nyc_ap_weather.origin==\"LGA\"].groupby([\"year\",\"month\",\"day\"])[[\"wind_speed\"]].mean(numeric_only=True).reset_index()\n```\n:::\n\n\n### Plot of daily mean wind speeds at LGA\n\n::: {#bb8e338d .cell execution_count=8}\n``` {.python .cell-code}\n# Create an array of dates, required for the x-axis\ndates = np.arange(\"2013-01-01\", \"2013-12-31\", dtype=\"datetime64[D]\")\n\n# Set figure size\nplt.figure(figsize=(11, 6))\n\n# Create line plot of daily average wind_speed\nplt.plot(dates, daily_ave_wind_speed[\"wind_speed\"], color=\"black\")\nplt.xlabel(\"Month\")\nplt.ylabel(\"Daily average wind speed [m/s] at LGA\")\nplt.title(\"Daily mean wind speed for LGA during 2013\")\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Task_4P_files/figure-html/cell-9-output-1.png){width=882 height=523}\n:::\n:::\n\n\nThe daily average wind speed at LGA shows a higher daily variation during the cooler months and a lower variation during the warmer months.\n\n### The ten windiest days at LGA\nFinding the 10 windiest days can easily be done using the `pandas` `nlargest` function.\n\n::: {#83c352c1 .cell execution_count=9}\n``` {.python .cell-code}\n# Use the pandas nlargest function to get the 10 windiest days at LGA\nwindiest_days = daily_ave_wind_speed.nlargest(10, \"wind_speed\").reset_index(drop=True)\nprint(\"##             wind_speed (m/s)\")\nprint(\"## date\")\nfor index, row in windiest_days.iterrows():\n    print(f'## {row[\"year\"]:4g}-{row[\"month\"]:02g}-{row[\"day\"]:02g}       {round(row[\"wind_speed\"], 2)}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n##             wind_speed (m/s)\n## date\n## 2013-11-24       11.32\n## 2013-01-31       10.72\n## 2013-02-17       10.01\n## 2013-02-21       9.19\n## 2013-02-18       9.17\n## 2013-03-14       9.11\n## 2013-11-28       8.94\n## 2013-05-26       8.85\n## 2013-05-25       8.77\n## 2013-02-20       8.66\n```\n:::\n:::\n\n\n### All the missing temperature readings for JFK\nWe are interested in finding all the missing temperature readings at JFK. These include those where the reading is NaN and those where the data is omitted from the data. \n\n::: {#4066f8ff .cell execution_count=10}\n``` {.python .cell-code}\n# Get only JFK data\njfk_weather = nyc_ap_weather[nyc_ap_weather.origin==\"JFK\"]\n\n# Get all the rows where the temperature is NaN\nnull_rows = jfk_weather.loc[jfk_weather[\"temp\"].isna()]\n\n# Create a fixed frequency DatetimeIndex\ndate_range = pd.date_range(\"2013-01-01 00:00\", \"2013-12-31 23:00\", freq=\"H\")\n\n# Create dummy data frame to apply the DateTimeIndex to\ndf = pd.DataFrame(np.ones((date_range.shape[0], 1)))\ndf.index = date_range  # set index\n\n# Check for missing datetime index values based on reference index (with all values)\n# The to_datetime converts the year, month, day, hour columns into a datetime object\nmissing_dates = df.index[~df.index.isin(pd.to_datetime(jfk_weather.loc[:,[\"year\", \"month\", \"day\", \"hour\"]]))]\n\n# Print the list of dates with missing data\nprint(\"# Dates with missing date for JFK\\n\")\n\n# Dates where the temperature is Nan\nprint(\"## Dates were the temperature is NaN\")\nprint('## Year  Month  Day  Hour')\n\nif len(null_rows):\n    for idx, row in null_rows.iterrows():\n        print(f'## {row[\"year\"]:04g}  {row[\"month\"]:02g}     {row[\"day\"]:02g}   {row[\"hour\"]:02g}')\nelse:\n    print(\"## No rows with temp = NaN\")\n\nprint()    \nprint(\"## Dates were the temperature is NaN\")\nprint(\"## Year  Month  Day  Hour\")\nfor row in missing_dates:\n    print(f'## {row.year:04g}  {row.month:02g}     {row.day:02g}   {row.hour:02g}')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# Dates with missing date for JFK\n\n## Dates were the temperature is NaN\n## Year  Month  Day  Hour\n## No rows with temp = NaN\n\n## Dates were the temperature is NaN\n## Year  Month  Day  Hour\n## 2013  01     01   05\n## 2013  02     21   05\n## 2013  03     05   06\n## 2013  03     31   01\n## 2013  04     03   00\n## 2013  08     13   04\n## 2013  08     16   04\n## 2013  08     19   21\n## 2013  08     22   22\n## 2013  08     23   00\n## 2013  08     23   01\n## 2013  10     26   00\n## 2013  10     26   01\n## 2013  10     26   02\n## 2013  10     26   03\n## 2013  10     26   04\n## 2013  10     27   01\n## 2013  11     01   07\n## 2013  11     01   08\n## 2013  11     03   00\n## 2013  11     03   01\n## 2013  11     03   02\n## 2013  11     03   03\n## 2013  11     03   04\n## 2013  11     04   15\n## 2013  12     31   00\n## 2013  12     31   01\n## 2013  12     31   02\n## 2013  12     31   03\n## 2013  12     31   04\n## 2013  12     31   05\n## 2013  12     31   06\n## 2013  12     31   07\n## 2013  12     31   08\n## 2013  12     31   09\n## 2013  12     31   10\n## 2013  12     31   11\n## 2013  12     31   12\n## 2013  12     31   13\n## 2013  12     31   14\n## 2013  12     31   15\n## 2013  12     31   16\n## 2013  12     31   17\n## 2013  12     31   18\n## 2013  12     31   19\n## 2013  12     31   20\n## 2013  12     31   21\n## 2013  12     31   22\n## 2013  12     31   23\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\darrin\\AppData\\Local\\Temp\\ipykernel_74728\\315129500.py:8: FutureWarning:\n\n'H' is deprecated and will be removed in a future version, please use 'h' instead.\n\n```\n:::\n:::\n\n\nAll the data for December 31st 2013 was omitted from the JFK data.\n\n### Add the missing temperature records for JFK to the JFK dataset\nNow that we have identified which months, days, and hours are missing data, we can insert NaNs into the dataset so that data is available for each month, day, and hour within 2013. This will allow us to consider replacing or imputing the missing value.\n\n::: {#c6d33eaf .cell execution_count=11}\n``` {.python .cell-code}\n# Data frame for missing dates\ndf_missing = pd.DataFrame(missing_dates, columns=[\"date\"])\n\n# Extract the year, month, day, and hour components\ndf_missing[\"origin\"]= \"JFK\"\ndf_missing[\"year\"] = df_missing[\"date\"].dt.year\ndf_missing[\"month\"] = df_missing[\"date\"].dt.month\ndf_missing[\"day\"] = df_missing[\"date\"].dt.day\ndf_missing[\"hour\"] = df_missing[\"date\"].dt.hour\n\n# Drop the date column\ndf_missing = df_missing.drop(columns=[\"date\"], axis=1)\n\n# Add the missing data dataframe to the JFK weather dataframe\njfk_weather = pd.concat([jfk_weather, df_missing], ignore_index=True)\n\n# Sort the data in ascending date and time order\njfk_weather.sort_values([\"year\", \"month\", \"day\", \"hour\"], ascending=[True, True, True, True], inplace=True)\n\n# Reset the index after sort\njfk_weather.reset_index(inplace=True,drop=True)\n```\n:::\n\n\n### Compute daily average temperatures, linearly interpolating for missing data\nTo allow comparison between the missing value-omitted and linearly interpolated cases for the daily average temperature at JFK we need to create linearly interpolated temperatures from the raw data. The linear interpolation is performed using the `pandas` function `interpolate` with the method=linear option. The resulting Series is then inserted as a column back into the original data frame. The daily average temperature is calculated by applying the mean aggregation function to the grouped by  data.\n\n::: {#2e8baa1e .cell execution_count=12}\n``` {.python .cell-code}\n# Perform linear interpolation for the missing data and insert the resulting Series as a column into the jfk_weather data frame\njfk_weather.insert(6, \"temp_interpolate\", jfk_weather.loc[:, \"temp\"].interpolate(method=\"linear\"))\n\n# Create an array of dates, required for the x-axis\ndates = np.arange(\"2013-01-01\", \"2014-01-01\", dtype=\"datetime64[D]\")\n\n# Calculate the daily average wind_speed at LGA\ndaily_ave_temp = jfk_weather.groupby([\"year\", \"month\", \"day\"])[[\"temp\"]].mean(numeric_only=True).reset_index()\ndaily_ave_temp_interp = jfk_weather.groupby([\"year\", \"month\", \"day\"])[[\"temp_interpolate\"]].mean(numeric_only=True).reset_index()\n```\n:::\n\n\n### Plot the daily average temperatures comparing the missing value-omitted versus linearly interpolated cases.\nNow that we have the daily average temperatures for the value-omitted and linearly interpolated cases, we can create a plot to allow visual comparison.\n\n::: {#8e638d8e .cell execution_count=13}\n``` {.python .cell-code}\n# Set figure size\nplt.figure(figsize=(11, 6))\n\n# Create a plot of daily average temperature\nplt.plot(dates, daily_ave_temp[\"temp\"], color=\"red\",label=\"value-omitted\")\nplt.plot(dates, daily_ave_temp_interp[\"temp_interpolate\"], linestyle=\"--\", color=\"green\",label=\"linearly interpolated\")\nplt.xlabel(\"Day\")\nplt.ylabel(\"Daily average temperature [ $^\\circ$C] at JFK\")\nplt.title(\"Daily average temperature for JFK during 2013\")\nplt.legend()\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Task_4P_files/figure-html/cell-14-output-1.png){width=895 height=523}\n:::\n:::\n\n\nThe only noticeable visual difference between the value-omitted and linearly interpolated daily average temperatures is on December 31st, where there is no data in the value-omitted, but data for the linearly interpolated.\n\n## Summary\nThis Jupyter Notebook demonstrates the use of `pandas` data frames to analyse time series meteorological data quantitatively using descriptive statistics and visually using line plots.\n\nPossible extensions to the data analysis include:\n- Calculating the daily average wind speed at EWR and JFK for comparison with LGA.\n- Calculate a moving average and plot it with the daily average.\n\n",
    "supporting": [
      "Task_4P_files"
    ],
    "filters": [],
    "includes": {}
  }
}