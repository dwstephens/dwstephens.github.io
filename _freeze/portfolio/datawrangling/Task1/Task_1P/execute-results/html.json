{
  "hash": "b6d4667e25583dca5f4bd942cc3acb8c",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Introduction to Python and Jupyter Notebooks'\njupyter: python3\n---\n\n## Introduction\nThis task introduces the use of Juptyer notebooks and Python through a data analysis exercise involving the calculation and plotting of a group of people's body mass index (BMI). Using Jupyter required creating and saving a notebook, creating and editing markdown and code cells, executing code cells, and switching between command and editing modes. Python was used for the data analysis, including creating and manipulating lists, creating functions, code documentation, exception handling, printing with formatting and plotting using the Matplotlib library.\n\n## Data input\nCreate three lists of identical lengths containing the data required for the analysis from my friends. The data required are:\n- `names`: A list containing the names of the people (friends) as strings.\n- `heights`: A list containing the heights of each person in centimetres.\n- `weights`: A list containing the weight of each person in kilograms.\n\n::: {#131804a0 .cell execution_count=1}\n``` {.python .cell-code}\nnames   = [\"George\", \"Mary\", \"Frank\", \"Goliath\", \"Susanna\"]\nheights = [172, 163, 185, 199, 178] # in centimetres\nweights = [139, 57, 52, 100, 83] # in kilograms\n```\n:::\n\n\nThe data is now contained in three lists of identical lengths. The next step is to use this data to calculate the BMI for each person in the list.\n\n## Calculation of the Body Mass Index (BMI)\nThe traditional body mass index (BMI) formula is weight / height^2, where the weight is in kilograms and the height is in meters. The New BMI formula (Wikipedia, 2025) is 1.3 x weight / height^2.5, where the weight is in kilograms and the height is in meters.\nGiven the weight and height, a function to calculate the BMI (`calculate_bmi`) is required. This function calculates the BMI using both the traditional and New methods. Before calculating the BMI values, the function conducts some data validation to ensure the passed arguments are convertible to floating point numbers and their value is greater than zero. The calculated BMI values are returned as a tuple.\n\n::: {#9e758c89 .cell execution_count=2}\n``` {.python .cell-code}\ndef calculate_bmi(weight, height):\n    \"\"\"\n    Calculates the BMI for a person given the weight (kg) and height (m) using the traditional and New methods.\n\n    The formulae are:\n        - Traditional BMI = weight/height^2\n        - New BMI = 1.3 x weight/height^2.25\n\n    :param weight: The weight of the person in kilograms.\n    :param height: The height of the person in meters.\n    :return: A tuple containing the traditional BMI and New BMI.\n    \"\"\"\n    # Handle any input type errors\n    # Check weight can be converted to a float\n    try:\n        weight_num = float(weight)\n    except ValueError:\n        print(f\"Weight is not a number, the type provided is {type(weight)}\")\n        return None\n\n    # Check height can be converted to a float    \n    try:\n        height_num = float(height)\n    except ValueError:\n        print(f\"Height is not a number, the type provided is {type(height)}\")\n        return None\n        \n    # At this point both input variables are known to be numbers. Now check they have the appropriate range.\n    if weight_num <= 0:\n        raise Exception(f\"The persons weight must be greater than zero, the value provided was {weight}\")\n    if height_num <= 0:\n        raise Exception(f\"The persons height must be greater than zero, the value provided was {height}\")\n        \n    # Calculate the BMI\n    persons_bmi = weight_num/height_num**2\n    persons_new_bmi = 1.3*weight_num/height_num**2.5\n    \n    return persons_bmi, persons_new_bmi\n```\n:::\n\n\nIterate over the list of people and calculate their BMI using the standard and New BMI methods by calling the function `calculate_bmi`. The tuple returned from `calculate_bmi` is unpacked into the variables `trad_bmi` and `new_bmi` which are appended to either the `bmis` or`new_bmis` lists.\n\n::: {#b95b49e2 .cell execution_count=3}\n``` {.python .cell-code}\nbmis = []\nnew_bmis = []\nfor idx, name in enumerate(names):\n    trad_bmi, new_bmi = calculate_bmi(weights[idx], heights[idx]/100)  # Note: the height is converted from centimetres to meters\n    bmis.append(trad_bmi)\n    new_bmis.append(new_bmi)\n```\n:::\n\n\nWe now have two lists, `bmis` and `new_bmis,` containing the calculated BMI values for each person for each calculation method.\n\n## Categorisation of BMIs \nEach person's BMI can be placed into one of four categories: underweight, normal, overweight, or obese (Wikipedia, 2025). This is achieved with a helper function `categorise_bmi`. The function also returns a list of colours that can be used when plotting the data.\n\n::: {#4559b0c1 .cell execution_count=4}\n``` {.python .cell-code}\ndef categorise_bmi(persons_bmi):\n    \"\"\"\n    For a given persons BMI value, categorise it based on the World Health Organisation (WHO) categories and assign a colour for plotting.\n    \n    The categories and colours are:\n        - \"underweight\", BMI < 18.5, colour=\"tab:blue\"\n        - \"normal\", 18.5 <= BMI < 25.0, colour=\"tab:green\"\n        - \"overweight\", 25.0 <= BMI < 30.0, colour=\"tab:orange\"\n        - \"obese\", BMI >= 30.0, colour=\"tab:red\"\n\n    :param persons_bmi:\n    :return: tuple containing strings for the WHO category and the plot colour.\n    \"\"\"\n    if persons_bmi < 18.5:\n        return \"underweight\", \"tab:blue\"\n    elif persons_bmi < 25.0:\n        return \"normal\", \"tab:green\"\n    elif persons_bmi < 30.0:\n        return \"overweight\", \"tab:orange\"\n    else:\n        return \"obese\", \"tab:red\"\n```\n:::\n\n\n## Results\nThe BMIs for each person in the input data can be tabulated by iterating over the calculated BMI data using a `for` loop to print one line for each person, as shown in the below output.\n\n::: {#90424023 .cell execution_count=5}\n``` {.python .cell-code}\n# Find the longest name so the spacing can be adjusted when printing\nname_padding = max(map(len, names))\n\nbmi_colours = []\nfor idx, bmi in enumerate(bmis):\n    # Get BMI category and plotting colour\n    bmi_category, bmi_colour = categorise_bmi(bmi)\n    bmi_colours.append(bmi_colour)    \n    print(f\"## {names[idx]:{name_padding}} has BMI of {bmi:4.2f} which is {bmi_category}. The New BMI index is {new_bmis[idx]:4.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n## George  has BMI of 46.98 which is obese. The New BMI index is 46.57\n## Mary    has BMI of 21.45 which is normal. The New BMI index is 21.84\n## Frank   has BMI of 15.19 which is underweight. The New BMI index is 14.52\n## Goliath has BMI of 25.25 which is overweight. The New BMI index is 23.27\n## Susanna has BMI of 26.20 which is overweight. The New BMI index is 25.53\n```\n:::\n:::\n\n\nThis output shows that the New BMI is higher for Mary (categorised as normal) and lower for each other person, not classified as normal, than the traditional formula's value. The New BMI formula uses an exponent for the height of 2.5 to better represent the scaling of mass with volume, which has an exponent of 3. This is an advantage of the New BMI formula as it better represents the scaling od mass with height. The factor of 1.3 is used to align the New BMI result with that of the traditional formula for people of average height. Therefore, the New BMI value will be lower for people with above-average height and higher for people with below-average height compared to the traditional formula's value. The New BMI formula has similar limitations to the traditional BMI, which is discussed below.\n\nFinally, we can visualise the data using a bar plot. In the plot, each bar represents one person; the height of the bar signifies their BMI value, and the colour of the bar represents the WHO categorisation of the person's BMI.\n\n::: {#6bc8aec3 .cell execution_count=6}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\nplt.bar(names, bmis, color=bmi_colours)\nplt.title(\"My Friends' BMIs\")\nplt.ylabel(r'BMI $\\left(\\frac{kg}{m^2}\\right)$')\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Task_1P_files/figure-html/cell-7-output-1.png){width=596 height=431}\n:::\n:::\n\n\nThe bar chart shows my friend's BMI values range from approximately 17 to 47. Frank has the lowest BMI and is categorised as underweight, while George is classified as obese, with his BMI being greater than 30. Mary is the only person that has a normal BMI.\n\n## Limitations and Benefits of BMI\nBMI suffers from several limitations from both the medical and societal perspectives.\n\nMedical limitations of BMI are numerous:\n - The calculation does not take into account variations between genders or races, as it was initially developed for European men (Wikipedia, 2025). It assumes that the relationship between weight and height is fixed irrespective of race or gender.\n - It does not account for body composition (fat, muscle, bone and water).\n - It does not distinguish between muscle and fat mass. Two people with the same height and mass but different muscle and fat percentages will have the same BMI. However, the individual with the higher muscle percentage is likely to have lower health risks but can still be identified as at risk based on their BMI.   \n  - It does not account for changes due to aging, such as loss of height (Wikipedia, 2025), changes in bone density, or body composition.\n It assumes a simple scaling between weight and height with disregard for other physical characteristics such as waist, wrist, and neck circumferences. \n\nIn a societal context, the BMI can result in stigmatisation and labelling of individuals as \"obese\" or \"overweight\", impacting their self-esteem and overall health.\n\nTwo of the most common misuses of BMI are: \n - An overemphasis on weight loss targeting the \"normal\" category rather than promoting overall health.\n - It can become the sole criterion for diagnosis rather than considering other factors such as an individual's body composition, muscle mass and physical characteristics.\n\nDespite its limitations, BMI provides medical practitioners with a convenient and easy-to-calculate measure from readily available measurements (a person's weight and height) that can be used to identify people who may be at risk of developing obesity-related conditions. Additionally, it can inform public health decisions.\n\n## Summary\nThis Jupyter Notebook demonstrates how to use Jupyter Notebooks and Python to conduct a data analysis exercise involving calculating and plotting a group of people's body mass index (BMI) using the traditional and New BMI formulae. The limitations and benefits of BMI were discussed.\n\nPossible extensions to the data analysis include:\n- De-identify the people by allocating a unique ID.\n- Further data should be added to allow segregation based on gender.\n- Consider alternate forms of BMI measure to overcome some of the limitations discussed above, such as the inclusion of waist measurement.\n\n# References\n\nWikipedia. (2025, March 6). Body Mass Index. https://en.wikipedia.org/wiki/Body_mass_index\n\n",
    "supporting": [
      "Task_1P_files"
    ],
    "filters": [],
    "includes": {}
  }
}