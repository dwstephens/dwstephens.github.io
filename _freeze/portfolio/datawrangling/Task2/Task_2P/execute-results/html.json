{
  "hash": "d26a0682088fa6242233aded583ccf18",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Working with numpy vectors'\njupyter: python3\n---\n\n::: {#23c3081d .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.598883Z\",\"start_time\":\"2025-03-12T22:34:21.064290Z\"}}' execution_count=1}\n``` {.python .cell-code}\nimport calendar\nimport matplotlib.pyplot as plt\nimport numpy as np\n```\n:::\n\n\n## Introduction\nThis task requires working with `numpy` vectors and Python to conduct a data analysis exercise involving the price of Bitcoin in US dollars (BTC-USD) for 2023. The BTC-USD data is loaded into a `numpy` vector from a text file. `Numpy` vector operations are used to calculate some descriptive statistics for the third financial quarter. The Bitcoin price in US dollars is plotted using the Matplitlib library, with a function defined to allow any financial quarter or year to be plotted using the same lines of code.  The daily Bitcoin price variation is investigated through a box plot and analysis of outliers.  \n\n## Data input\nThe historical data for BTC-USD is available on the Yahoo finance website: https://finance.yahoo.com/quote/BTC-USD>. The data file contains the Bitcoin price data from 1st January 2023 to 8th March 2025 and is loaded using the `loadtxt` function from `numpy`.\n\n::: {#e558ad13 .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.608500Z\",\"start_time\":\"2025-03-12T22:34:21.604098Z\"}}' execution_count=2}\n``` {.python .cell-code}\nrates = np.loadtxt(\"btc-usd_data.txt\")\n```\n:::\n\n\n### Year for analysis\nThe loaded data starts on 1st January 2023 to 8th March 2025. We have data for the complete years 2023 and 2024. The variable below can be set to 2023 or 2024. The task requires data analysis of 2023, so the `year` variable is set to 2023.\n\n::: {#6c20f39d .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.625123Z\",\"start_time\":\"2025-03-12T22:34:21.622232Z\"}}' execution_count=3}\n``` {.python .cell-code}\nyear = 2023\n```\n:::\n\n\n### Helper function for handling different financial quarters and years in the data\nThe function `get_year_info` returns a dictionary containing information about the indices in the data for the start and end of the year and each of the financial quarters. This will be used to slice the data when doing the analysis below.\n\n::: {#888346b9 .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.638443Z\",\"start_time\":\"2025-03-12T22:34:21.633054Z\"}}' execution_count=4}\n``` {.python .cell-code}\ndef get_year_info(chosen_year, data_start_year=2023):\n    \"\"\"\n    For a given chosen_year, determines, the indexes for the chosen_year start and end, the start\n    and end indices for each financial quarter and the number of days in the chosen_year.\n    The function handles leap years.\n\n    :param chosen_year: The year we need the information for.\n    :param data_start_year: The year the data starts from. Defaulted to 2023.\n    :return: A dictionary containing information for the indexes in the loaded data relating to the\n        start and end of the various financial quarters.\n    \"\"\"\n    # Initialise the result to an empty dictionary.\n    result = {}\n\n    # Ensure the input chosen_year is either 2023 or 2024\n    if chosen_year not in [data_start_year, data_start_year + 1]:\n        print(f\"Year must be {data_start_year} or {data_start_year + 1}\")\n        return\n\n    # Use the calendar module to check if the chosen_year is a leap year.\n    if calendar.isleap(chosen_year):\n        result[\"num_days_year\"] = 366\n        q1_num_days = 91\n    else:\n        result[\"num_days_year\"] = 365\n        q1_num_days = 90\n\n    # Number of days in quarters 2,3 are independent on the chosen_year being a leap year.\n    q2_num_days = 91\n    q3_num_days = 92\n\n    # Store the chosen_year's start and end indices\n    result[\"year_start_num\"] = 1\n    result[\"year_end_num\"] = result[\"num_days_year\"]\n\n    # For 2024 the data occurs after 2023 so update the start and end indices\n    if chosen_year == data_start_year + 1:\n        result[\"year_start_num\"] = result[\"num_days_year\"]\n        result[\"year_end_num\"] = result[\"year_start_num\"] + result[\"num_days_year\"] - 1\n\n        # Add data into dictionary\n    result[\"q1_start\"] = result[\"year_start_num\"]\n    result[\"q1_end\"] = result[\"q1_start\"] + q1_num_days - 1\n    result[\"q2_start\"] = result[\"q1_end\"] + 1\n    result[\"q2_end\"] = result[\"q2_start\"] + q2_num_days - 1\n    result[\"q3_start\"] = result[\"q2_end\"] + 1\n    result[\"q3_end\"] = result[\"q3_start\"] + q3_num_days - 1\n    result[\"q4_start\"] = result[\"q3_end\"] + 1\n    result[\"q4_end\"] = result[\"year_end_num\"]\n\n    return result\n```\n:::\n\n\n### Get information about the year for analysis\nCall `get_year_info` for the chosen year to obtain a dictionary that contains information relating to the indexes in the loaded data relating to the start and end of the various financial quarters.\n\n::: {#c271a039 .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.660196Z\",\"start_time\":\"2025-03-12T22:34:21.656848Z\"}}' execution_count=5}\n``` {.python .cell-code}\nyear_info = get_year_info(year)\n```\n:::\n\n\n## Descriptive Statistics for Q3 for the chosen year\nThe following descriptive statistics are calculated using `numpy` functions and printed for Q3 of the chosen year:\n\n - Arithmetic mean\n - Minimum\n - 1st quartile\n - Median\n - 3rd quartile\n - Maximum\n - Standard deviation\n - Inter-quartile range (IQR)\n\nThe above calculations are done for the chosen financial quarter in the selected year, which, in this case, is Q3 2023. The quarter can be changed by changing the slicing used to create the numpy array `fin_quarter`, and the year can be changed with the variable `year` found at the top of the notebook.\n\n::: {#531ade05 .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.673282Z\",\"start_time\":\"2025-03-12T22:34:21.666222Z\"}}' execution_count=6}\n``` {.python .cell-code}\n# Create numpy array for the required quarter by slicing the full data\nfin_quarter = rates[year_info[\"q3_start\"]-1:year_info[\"q3_end\"] ]\n\n# Spacing to help with formatting of the printing\npadding = 30\n\n# Print the header\nprint(f\"\\033[1m  Descriptive Statistics for Q3 {year}\\033[0m\")\n\n# Arithmetic mean\nquarter_a_mean = np.mean(fin_quarter)\nprint(f\"##{'arithmetic mean:':>{padding}}   {round(quarter_a_mean, 2):9.2f}\")\n\n# Minimum\nquarter_min = np.min(fin_quarter)\nprint(f\"##{'minimum:':>{padding}}   {round(quarter_min, 2):9.2f}\")\n\n# Quartiles, Q1, Median, Q3\nquartiles = np.quantile(fin_quarter, [0, 0.25, 0.5, 0.75, 1])\n\n# Q1 - first quartile\nquarter_q1 = quartiles[1]\nprint(f\"##{'Q1:':>{padding}}   {round(quarter_q1,2):9.2f}\")\n\n# Median\nquarter_median = quartiles[2]\nprint(f\"##{'median:':>{padding}}   {round(quarter_median, 2):9.2f}\")\n\n# Q3 - third quartile\nquarter_q3 = quartiles[3]\nprint(f\"##{'Q3:':>{padding}}   {round(quarter_q3, 2):9.2f}\")\n\n# Maximum\nquarter_max = np.max(fin_quarter)\nprint(f\"##{'maximum:':>{padding}}   {round(quarter_max, 2):9.2f}\")\n\n# Standard deviation\nquarter_std = np.std(fin_quarter, ddof=0)\nprint(f\"##{'standard deviation:':>{padding}}   {round(quarter_std, 3):9.2f}\")\n\n# Inter-quartile range (IQR)\nquarter_iqr = quarter_q3 - quarter_q1\nprint(f\"##{'IQR:':>{padding}}   {round(quarter_iqr, 3):9.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bold\">  Descriptive Statistics for Q3 2023</span>\n\n##              arithmetic mean:    28091.33\n\n##                      minimum:    25162.65\n\n##                           Q1:    26225.55\n\n##                       median:    28871.82\n\n##                           Q3:    29767.07\n\n##                      maximum:    31476.05\n\n##           standard deviation:     1827.04\n\n##                          IQR:     3541.51\n</pre>\n```\n:::\n\n:::\n:::\n\n\nDuring the 3rd financial quarter of 2023, the Bitcoin price had a minimum of $\\$25,162.25$ USD, a maximum of $\\$31,476.05$ USD and a standard deviation of $\\$1,827.04$ USD.\n\n## Plot of Bitcoin price value in USD for Q3 2023\n\n### Function for generating line plots of the data\nThe `plot_quarter_year` function takes the start, end and year start indices for slicing of the rates `numpy` array. Any financial quarter or year can be plotted by changing the slice start and end indices.\n\n::: {#fac9338b .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.700235Z\",\"start_time\":\"2025-03-12T22:34:21.696588Z\"}}' execution_count=7}\n``` {.python .cell-code}\ndef plot_quarter_year(start, end, year_start, colour, label):\n    \"\"\"\n    Generate a plot of the Bitcoin price as a function of days for either a financial quarter or\n    calendar chosen_year.\n\n    :param start: The index where the plotting will start in the complete data.\n    :param end: The index in the complete data where the plotting will end.\n    :param year_start: The index in the complete data for the start of the chosen chosen_year.\n    :param colour: The colour for the line in the plot.\n    :param label: The label to give the line in the plot.\n    :return: A dictionary containing information for the indexes in the loaded data relating to the\n        start and end of the various financial quarters.\n    \"\"\"\n    # Create a numpy array that will be used for the x-axis in the plot\n    days = np.arange(start - year_start + 1, end - year_start + 2)\n    # Create the plot\n    plt.plot(days, rates[start:end + 1], color=colour, label=label)\n    plt.title(\"BTC to USD\")\n    plt.ylabel(\"Price of BTC in $US\")\n    plt.xlabel(f\"Day number in {year}\")\n    plt.legend()\n    plt.show()\n\n```\n:::\n\n\n### Call the function to generate the plot\n\n::: {#32f7bdce .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.842236Z\",\"start_time\":\"2025-03-12T22:34:21.716847Z\"}}' execution_count=8}\n``` {.python .cell-code}\n# Call the plot_quarter_year function using the Q3 start and end indices to choosing Q3 from rates\nplot_quarter_year(year_info[\"q3_start\"], year_info[\"q3_end\"], year_info[\"year_start_num\"], 'red',\n                  f'Q3 {year}')\n```\n\n::: {.cell-output .cell-output-display}\n![](Task_2P_files/figure-html/cell-9-output-1.png){width=610 height=449}\n:::\n:::\n\n\nIn the third quarter of 2023, the Bitcoin price started nearing its maximum value for the quarter. There was a gradual decline in price until days 228, then a sudden drop to ~$\\$26,000$ USD in a day. The price then gradually declined to the minimum for the quarter before rallying to finish the quarter at around $\\$28,000$ USD. \n\n### Highest and Lowest days\nThe `numpy`, `armin`, and `argmax` functions are used to calculate the index in the quarter's numpy array where the minimum and maximum occur. This index is then adjusted to represent the day number in the year.\n\n::: {#17cfd93c .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:21.855830Z\",\"start_time\":\"2025-03-12T22:34:21.851695Z\"}}' execution_count=9}\n``` {.python .cell-code}\nmin_index = np.argmin(fin_quarter)\n# Change the index to the day within the whole chosen_year rather than just the quarter\nmin_index += (year_info['q3_start'] - year_info[\"year_start_num\"] + 1)\nprint(f\"{'## Lowest':<10} price was on day {min_index} ({round(quarter_min, 2)}).\")\n\nmax_index = np.argmax(fin_quarter)\n# Change the index to the day within the whole chosen_year rather than just the quarter\nmax_index += (year_info['q3_start'] - year_info[\"year_start_num\"] + 1)\nprint(f\"## Highest price was on day {max_index} ({round(quarter_max, 2)}).\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n## Lowest  price was on day 254 (25162.65).\n## Highest price was on day 194 (31476.05).\n```\n:::\n:::\n\n\nFor the third quarter of 2023, the highest price occurred on day 194 (July 13th) and the lowest on day 254 (September 11th).\n\n## Plots for Q1, Q2 and Q4 of 2023\n\n::: {#8757c826 .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:36:24.358561Z\",\"start_time\":\"2025-03-12T22:36:23.965230Z\"}}' execution_count=10}\n``` {.python .cell-code}\n# Call the plot_quarter_year function using the Q1 start and end indices to choosing Q1 from rates \nplot_quarter_year(year_info[\"q1_start\"], year_info[\"q1_end\"], year_info[\"year_start_num\"], 'green',\n                  f'Q1 {year}')\n\n# Call the plot_quarter_year function using the Q2 start and end indices to choosing Q3 from rates \nplot_quarter_year(year_info[\"q2_start\"], year_info[\"q2_end\"], year_info[\"year_start_num\"], 'orange',\n                  f'Q2 {year}')\n\n# Call the plot_quarter_year function using the Q3 start and end indices to choosing Q3 from rates\nplot_quarter_year(year_info[\"q3_start\"], year_info[\"q3_end\"], year_info[\"year_start_num\"], 'red',\n                  f'Q3 {year}')\n\n# Call the plot_quarter_year function using the Q4 start and end indices to choosing Q3 from rates \nplot_quarter_year(year_info[\"q4_start\"], year_info[\"q4_end\"], year_info[\"year_start_num\"], 'blue',\n                  f'Q4 {year}')\n```\n\n::: {.cell-output .cell-output-display}\n![](Task_2P_files/figure-html/cell-11-output-1.png){width=610 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Task_2P_files/figure-html/cell-11-output-2.png){width=610 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Task_2P_files/figure-html/cell-11-output-3.png){width=610 height=449}\n:::\n\n::: {.cell-output .cell-output-display}\n![](Task_2P_files/figure-html/cell-11-output-4.png){width=610 height=449}\n:::\n:::\n\n\nThe Bitcoin price started 2023 around $\\$16,500$ USD and showed bullish behaviour to finish the quarter near $\\$28,000$ USD. Performance in the 2nd quarter shows high variability, with the overall trend decreasing to the lowest value of ~ $\\$25,000$ USD on June 15th before a dramatic rise to close the quarter around $\\$30,500$ USD. The bullish behaviour seen at the end of the 3rd quarter carried into the 4th quarter. A jump in price from $\\$30,000$ USD to ~ $\\$34,500$ USD occurred between days 296 and 300 (October 23rd to 26th), with another strong rally from $\\$37,800$ USD to $\\$44,000$ USD between days 335 and 340 ( December 1st to 6th). The price stabilises during December to finish the quart and year at $\\$42,152.10$ USD.   \n\n# Box-and-whisker plot for price variation in Q3 in 2023\nTo understand the daily Bitcoin price variation, a box-and-whisker plot can be created from the daily increase/decrease in price.\n\nThe daily variation in price for a quarter can be calculated using `numpy.diff`.\n\n::: {#ddfa4900 .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:22.191236Z\",\"start_time\":\"2025-03-12T22:34:22.188225Z\"}}' execution_count=11}\n``` {.python .cell-code}\nquarter_price_difference = np.diff(fin_quarter)\n```\n:::\n\n\n## Create the plot\nUse the `Matplotlib` `boxplot` function to create the plot. The figure size is adjusted to reduce the vertical white space in the plot and to increase its width. The arithmetic mean of the quarter daily price difference is calculated using `numpy.mean` and added to the plot with the `Matplotlib` plot function.\n\n::: {#f9bd9739 .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:34:22.267975Z\",\"start_time\":\"2025-03-12T22:34:22.209767Z\"}}' execution_count=12}\n``` {.python .cell-code}\nplt.figure(figsize=(12, 3), )\nplt.boxplot(quarter_price_difference, vert=False)\nplt.plot(np.mean(quarter_price_difference), 1, color='green', marker='x', linewidth=2, markersize=10)\nplt.title(f\"Distribution of BTC-to-USD daily price increases in Q3 {year}\")\nplt.yticks([], [])\nplt.show()\n```\n\n::: {.cell-output .cell-output-display}\n![](Task_2P_files/figure-html/cell-13-output-1.png){width=912 height=283}\n:::\n:::\n\n\nThe box plot shows a graphical representation of some of the descriptive statistics. The left side of the box is the first quartile, the right side is the third quartile, and the orange line inside the box is the median. The box length is the difference between the third and first quartiles and represents the inter-quartile range (IQR) and represents 50\\% of the data. The whiskers are placed at 1.5*IQR above and below the third and first quartiles. Values outside the whiskers are termed outliers.\n\n## Counting outliers\nOutliers are values that are outside the whiskers. Low outliers are below Q1-1.5IQR, and high outliers are above Q3+1.5IQR. The number of outliers can be counted by finding the values outside the whiskers using slicing. The number is simply the length of the resulting arrays.\n\n::: {#f60c7d5b .cell quarto-private-1='{\"key\":\"ExecuteTime\",\"value\":{\"end_time\":\"2025-03-12T22:35:29.792365Z\",\"start_time\":\"2025-03-12T22:35:29.787833Z\"}}' execution_count=13}\n``` {.python .cell-code}\n# Count outliers\n# Quartiles, Q1, Median, Q3\ndifference_quartiles = np.quantile(quarter_price_difference, [0.25, 0.75])\n\n# Q1\nquarter_difference_q1 = difference_quartiles[0]\n\n# Q3\nquarter_difference_q3 = difference_quartiles[1]\n\n# Inter quartile range (IQR)\nquarter_difference_iqr = quarter_difference_q3 - quarter_difference_q1\n\n# Calculate the values for the whiskers\nlower_whisker = quarter_difference_q1 - 1.5 * quarter_difference_iqr\nupper_whisker = quarter_difference_q3 + 1.5 * quarter_difference_iqr\n\n# Create arrays only containing values outside the whiskers\noutliers_above = quarter_price_difference[quarter_price_difference > upper_whisker]\noutliers_below = quarter_price_difference[quarter_price_difference < lower_whisker]\n\n# The length of the arrays represents the number of outliers.\nprint(f\"## There are {len(outliers_above) + len(outliers_below)} outliers.\",\n      f\"{len(outliers_above)} above the right whisker and\",\n      f\"{len(outliers_below)} below the left whisker.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n## There are 16 outliers. 7 above the right whisker and 9 below the left whisker.\n```\n:::\n:::\n\n\nBitcoin's price can have extreme price fluctuations in short periods of time, and these are likely to appear as outliers.\n\n## Summary\nThis Jupyter Notebook demonstrates the use of `numpy` vectors and functions to analyze Bitcoin price data quantitatively using descriptive statistics and visually using line and box plots.\n\nPossible extensions to the data analysis include:\n- Create a box plot for each financial quarter to visually compare the daily price difference between quarters.\n- Plot the price difference data as a histogram and compare to a normal model.\n- Extend the analysis to look at other years.\n\n",
    "supporting": [
      "Task_2P_files"
    ],
    "filters": [],
    "includes": {}
  }
}